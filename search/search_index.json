{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to BotCity's Document Processing SDK. Installation Latest release Using PyPI pip install botcity-documents","title":"Home"},{"location":"#welcome","text":"Welcome to BotCity's Document Processing SDK.","title":"Welcome"},{"location":"#installation","text":"","title":"Installation"},{"location":"#latest-release","text":"","title":"Latest release"},{"location":"#using-pypi","text":"pip install botcity-documents","title":"Using PyPI"},{"location":"intro/","text":"Getting Started After you installed this package, it is highly recommended that you install the BotCity Studio as to leverage its intuitive interface and automatic code generation for document parsing. Please follow the instructions on the BotCity Studio website . Preparing the Code Whether you have an existing codebase and want to extend its capabilities with the BotCity Document Processing or you are starting a new project, it is important that add the following on your code: # Import the PDFReader and DocumentParser objects from botcity.document_processing import * ... # Instantiate Reader reader = PDFReader () # Read file and get parser parser = reader . read_file ( \"important_document.pdf\" ) ... The BotCity Studio will assume for autogeneration that your parser variable is named parser . If that is not the case you can easily refactor that later once the code is generated using your favorite IDE. A word about PDF files and images Some PDF files are text based and some are scanned images. It is important to differentiate between them since for the image type you will need an additional plugin to perform the conversion between image and text for processing. You can pick your favorite OCR plugin from the list of plugins available at the BotCity Plugins for Python website . As an example, here is a code snippet using the BotCity Google Cloud Vision plugin. # Import the PDFReader and DocumentParser objects from botcity.document_processing import * # Import the Google Cloud Vision plugin from botcity.plugins.cloudvision import BotCloudVisionPlugin # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Fetch the entries from the file after reading. # PS: This also works for image files such as PNG, JPEG, etc. entries = cloudvision . read ( \"important_image_document.pdf\" ) . entries () # Instantiate the parser parser = DocumentParser () # Load the parser with the OCR entries parser . load_entries ( entries ) # Use your parser and process your document entry = parser . get_first_entry ( \"More text.\" ) Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"intro/#getting-started","text":"After you installed this package, it is highly recommended that you install the BotCity Studio as to leverage its intuitive interface and automatic code generation for document parsing. Please follow the instructions on the BotCity Studio website .","title":"Getting Started"},{"location":"intro/#preparing-the-code","text":"Whether you have an existing codebase and want to extend its capabilities with the BotCity Document Processing or you are starting a new project, it is important that add the following on your code: # Import the PDFReader and DocumentParser objects from botcity.document_processing import * ... # Instantiate Reader reader = PDFReader () # Read file and get parser parser = reader . read_file ( \"important_document.pdf\" ) ... The BotCity Studio will assume for autogeneration that your parser variable is named parser . If that is not the case you can easily refactor that later once the code is generated using your favorite IDE.","title":"Preparing the Code"},{"location":"intro/#a-word-about-pdf-files-and-images","text":"Some PDF files are text based and some are scanned images. It is important to differentiate between them since for the image type you will need an additional plugin to perform the conversion between image and text for processing. You can pick your favorite OCR plugin from the list of plugins available at the BotCity Plugins for Python website . As an example, here is a code snippet using the BotCity Google Cloud Vision plugin. # Import the PDFReader and DocumentParser objects from botcity.document_processing import * # Import the Google Cloud Vision plugin from botcity.plugins.cloudvision import BotCloudVisionPlugin # Instantiate the plugin cloudvision = BotCloudVisionPlugin () # Setup the path to the service account key credentials JSON file cloudvision . credentials ( \"<path_to_my>/credentials.json\" ) # Fetch the entries from the file after reading. # PS: This also works for image files such as PNG, JPEG, etc. entries = cloudvision . read ( \"important_image_document.pdf\" ) . entries () # Instantiate the parser parser = DocumentParser () # Load the parser with the OCR entries parser . load_entries ( entries ) # Use your parser and process your document entry = parser . get_first_entry ( \"More text.\" )","title":"A word about PDF files and images"},{"location":"intro/#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"},{"location":"api/","text":"API The API has two main components: PDFReader : this class reads PDF files and returns a Document Parser instance. DocumentParser : this class offers high-level parsing routines which allow you to find and read information on your document. In order to make it easy for users, all components are available via the core module. from botcity.document_processing import * The following sections will describe each component in depth.","title":"API"},{"location":"api/#api","text":"The API has two main components: PDFReader : this class reads PDF files and returns a Document Parser instance. DocumentParser : this class offers high-level parsing routines which allow you to find and read information on your document. In order to make it easy for users, all components are available via the core module. from botcity.document_processing import * The following sections will describe each component in depth.","title":"API"},{"location":"api/parser/","text":"Document Parser botcity.document_processing.parser.document.DocumentParser add_entry ( self , entry ) Add an entry into the parser list. Parameters: Name Type Description Default entry Entry The entry to be added. required clear ( self ) Clear the list of entries. combined_entries ( self , * args ) Combine a list of entries into a new merged entry. Returns: Type Description Entry Entry: The new merged entry. get_entries ( self ) The parser entries. Returns: Type Description List[botcity.document_processing.parser.entry.Entry] List[Entry]: The parser entries. get_first_entry ( self , text = '' , entry = 0 ) Get the first entry which meets the text criteria. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry. get_first_entry_contains ( self , text = '' , entry = 0 ) Get the first entry which contains the text criteria. Parameters: Name Type Description Default text Optional[str] The entry partial text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry. get_full_text ( self ) Returns the full document text. Returns: Type Description str str: The document text. get_last_entry ( self ) Get the last entry on the parser's entry list. Returns: Type Description Entry Entry: The last entry. get_n_entry ( self , text = '' , entry = 0 , count = 1 ) Get the nth entry corresponding to the parameters. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 count Optional[int] Index of search to return. 1 means first entry, 2 means second entry, etc. Defaults to 1. 1 Returns: Type Description Entry Entry: The corresponding entry. get_second_entry ( self , text = '' , entry = 0 ) get the second entry which meets the text criteria. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry. load_entries ( self , entries ) Load entries into the parser. Parameters: Name Type Description Default entries List List of Entry objects or List of List containing the required information. required print ( self ) Print the list of entries. read ( self , entry , margin_left , margin_right , margin_top , margin_bottom , line_height = None , data_type = None , right_reference = None , bottom_reference = None ) Read an area and return its content. Parameters: Name Type Description Default entry Entry The anchor entry. required margin_left float Proportion from the anchor's left corner. required margin_right float Proportion from the anchor's right corner. required margin_top float Proportion from the anchor's top. required margin_bottom float Proportion from the anchor's bottom. required line_height Optional[int] Line height for compensation. Defaults to None. None data_type [type] Expected data type for use with OCR to correct for possible reading artifacts. Defaults to None. None right_reference Optional[botcity.document_processing.parser.entry.Entry] Reference Entry to use as right anchor. Defaults to None. None bottom_reference Optional[botcity.document_processing.parser.entry.Entry] Reference Entry to use as bottom anchor. Defaults to None. None Returns: Type Description str str: The text content from the area. set_entries ( self , entries ) Sets the list of entries. Parameters: Name Type Description Default entries List[botcity.document_processing.parser.entry.Entry] List of entries. required","title":"Document Parser"},{"location":"api/parser/#document-parser","text":"","title":"Document Parser"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser","text":"","title":"DocumentParser"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.add_entry","text":"Add an entry into the parser list. Parameters: Name Type Description Default entry Entry The entry to be added. required","title":"add_entry()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.clear","text":"Clear the list of entries.","title":"clear()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.combined_entries","text":"Combine a list of entries into a new merged entry. Returns: Type Description Entry Entry: The new merged entry.","title":"combined_entries()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_entries","text":"The parser entries. Returns: Type Description List[botcity.document_processing.parser.entry.Entry] List[Entry]: The parser entries.","title":"get_entries()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_first_entry","text":"Get the first entry which meets the text criteria. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry.","title":"get_first_entry()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_first_entry_contains","text":"Get the first entry which contains the text criteria. Parameters: Name Type Description Default text Optional[str] The entry partial text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry.","title":"get_first_entry_contains()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_full_text","text":"Returns the full document text. Returns: Type Description str str: The document text.","title":"get_full_text()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_last_entry","text":"Get the last entry on the parser's entry list. Returns: Type Description Entry Entry: The last entry.","title":"get_last_entry()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_n_entry","text":"Get the nth entry corresponding to the parameters. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 count Optional[int] Index of search to return. 1 means first entry, 2 means second entry, etc. Defaults to 1. 1 Returns: Type Description Entry Entry: The corresponding entry.","title":"get_n_entry()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.get_second_entry","text":"get the second entry which meets the text criteria. Parameters: Name Type Description Default text Optional[str] The entry text. Defaults to \"\". '' entry Union[int, botcity.document_processing.parser.entry.Entry] Reference Entry or index to use as start point for the search. Defaults to 0. 0 Returns: Type Description Entry Entry: The corresponding entry.","title":"get_second_entry()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.load_entries","text":"Load entries into the parser. Parameters: Name Type Description Default entries List List of Entry objects or List of List containing the required information. required","title":"load_entries()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.print","text":"Print the list of entries.","title":"print()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.read","text":"Read an area and return its content. Parameters: Name Type Description Default entry Entry The anchor entry. required margin_left float Proportion from the anchor's left corner. required margin_right float Proportion from the anchor's right corner. required margin_top float Proportion from the anchor's top. required margin_bottom float Proportion from the anchor's bottom. required line_height Optional[int] Line height for compensation. Defaults to None. None data_type [type] Expected data type for use with OCR to correct for possible reading artifacts. Defaults to None. None right_reference Optional[botcity.document_processing.parser.entry.Entry] Reference Entry to use as right anchor. Defaults to None. None bottom_reference Optional[botcity.document_processing.parser.entry.Entry] Reference Entry to use as bottom anchor. Defaults to None. None Returns: Type Description str str: The text content from the area.","title":"read()"},{"location":"api/parser/#botcity.document_processing.parser.document.DocumentParser.set_entries","text":"Sets the list of entries. Parameters: Name Type Description Default entries List[botcity.document_processing.parser.entry.Entry] List of entries. required","title":"set_entries()"},{"location":"api/reader/","text":"PDF Reader botcity.document_processing.pdf.pdfreader.PDFReader page_height : float property readonly PDF Page height. page_width : float property readonly PDF Page width. read_file ( self , file ) Read the given PDF file and returns a new instance of the DocumentParser. Parameters: Name Type Description Default file str PDF file path. required Returns: Type Description DocumentParser DocumentParser: The document parser to be used.","title":"PDF Reader"},{"location":"api/reader/#pdf-reader","text":"","title":"PDF Reader"},{"location":"api/reader/#botcity.document_processing.pdf.pdfreader.PDFReader","text":"","title":"PDFReader"},{"location":"api/reader/#botcity.document_processing.pdf.pdfreader.PDFReader.page_height","text":"PDF Page height.","title":"page_height"},{"location":"api/reader/#botcity.document_processing.pdf.pdfreader.PDFReader.page_width","text":"PDF Page width.","title":"page_width"},{"location":"api/reader/#botcity.document_processing.pdf.pdfreader.PDFReader.read_file","text":"Read the given PDF file and returns a new instance of the DocumentParser. Parameters: Name Type Description Default file str PDF file path. required Returns: Type Description DocumentParser DocumentParser: The document parser to be used.","title":"read_file()"}]}